<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hugo文档管理工具 on Material Docs</title>
    <link>https://heheiscool.github.io/posters/mystudy/</link>
    <description>Recent content in hugo文档管理工具 on Material Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://heheiscool.github.io/posters/mystudy/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-11-01%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%8606/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-11-01%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%8606/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2021-10-12javascript核心原理笔记</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-12javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-12javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</guid>
      <description>date: 2021-10-13T10:06:52+08:00
draft: true
由delete 0;开始思考
作者从表像出发，分析其本质，推断出delete的原始语法：
delete UnaryExpression  JavaScript 程序中的一段源代码在执行之前会经历三个步骤，统称为 编译    分词/词法分析 解析/语法分析 代码生成    先看原书对一个赋值操作的拆解说明：   变量的赋值操作会执行两个动作，首先编译器会在当前作用域中声明一个变量（如果之前没有声明过），然后在运行时引擎会在作用域中查找该变量，如果能够找到就会对它赋值。 &amp;mdash; 《你不知道的JavaScript（上卷）》 P7
  而要讲的 LHS 和 RHS 就是上面说的对变量的两种查找操作，查找的过程是由作用域（词法作用域）进行协助，在编译的第二步中执行。  LHS与RHS 非常饶舌 Left hand side 赋值操作左侧
Right hand side 赋值操作右侧
应用的本质：变量的存储容器，无论是LHS查询还是RHS查询都是针对引擎的查询方式。RHS也能理解为取到原值(或查到变量值或赋值操作源头)，LHS查询目的是给指定应用赋值(查到赋值操作目标)
总结：判断是RHS查询看是否是找取值源头，判断是否是LHS就看值确定赋值给谁或变量名在等号左边！
栗子：
console.log(a) a进行了RHS操作，此时没有对a赋值，而是直接引用了a，我们需要查询并拿到a的值才能传递给参数
a=2	引擎对a进行了左查询，在作用域集合中找a，然后把a变量值赋给查找到的a
参考原书中文版P12，英文版见 github
 作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。 如果查找的目的是对变量进行赋值，就会使用 LHS 查询；如果目的是获取变量的值，就会用 RHS 查询。 赋值操作会导致 LHS 查询。 = 操作符或调用函数时传入参数的操作都会导致关联作用域的赋值操作, 即都会导致 LHS 查询。 JavaScript 引擎首先会在代码执行前对其进行编译，在这个过程中，像var a = 2 这样的声明会被分解成两个独立的步骤：  首先，var a在其作用域中声明新变量。这会在最开始的阶段，也就是代码执行前进行。 接下来，a = 2会查询（LHS查询）变量 a 并对其进行赋值。   LHS 和 RHS 查询都会在当前执行作用域中开始，如果有需要（也就是说它们没有找到所需的标识符），就会向上级作用域继续查找目标标识符，这样每次上升一级作用域，最后到达全局作用域，无论找到或没找到都将停止。 不成功的 RHS 引用会导致抛出 ReferenceError 异常。不成功的 LHS 引用会导致自动隐式地创建一个全局变量（非严格模式下），该变量使用 LHS 引用的目标作为标识符，或者抛出 ReferenceError 异常（严格模式下）  </description>
    </item>
    
    <item>
      <title>2021-10-15区块链-solidity学习05</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-15%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A005-truffle%E4%B8%8Ejs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-15%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A005-truffle%E4%B8%8Ejs/</guid>
      <description>与区块链合约的交互有两种形式，一种是直接利用用户的私钥直接链接节点操作，一种是通过浏览器中的钱包插件交互。这里是第二种。
1、npm查询所有全局包
npm list -g --depth 0 2、truffle 是一个以太坊的开发框架：
 内置的智能合约编译，链接，部署和二进制文件的管理。 快速开发下的自动合约测试。 脚本化的，可扩展的部署与发布框架。 部署到不管多少的公网或私网的网络环境管理功能 使用EthPM&amp;amp;NPM提供的包管理，使用ERC190标准。 与合约直接通信的直接交互控制台（写完合约就可以命令行里验证了）。 可配的构建流程，支持紧密集成。 在Truffle环境里支持执行外部的脚本。   npm install -g truffle 3、有一个默认案例可以参考
truffle unbox pet-shop Commands: Compile: truffle compile Migrate: truffle migrate Test contracts: truffle test Run dev server: npm run dev 创建一个工程：
$ truffle init 4、目录结构
  contracts/: Contains the Solidity source files for our smart contracts. There is an important contract in here called Migrations.</description>
    </item>
    
    <item>
      <title>2021-10-20go语言学习01-环境配置</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-20go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A001-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-20go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A001-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>工作区集合：src源码，pkg归档文件，平台相关目录
go多版本管理
https://polarisxu.studygolang.com/posts/go/managing-multiple-go-versions/</description>
    </item>
    
    <item>
      <title>2021-10-23区亏链-Dapp平台相容性解决方案</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-23%E5%8C%BA%E4%BA%8F%E9%93%BE-dapp%E5%B9%B3%E5%8F%B0%E7%9B%B8%E5%AE%B9%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-23%E5%8C%BA%E4%BA%8F%E9%93%BE-dapp%E5%B9%B3%E5%8F%B0%E7%9B%B8%E5%AE%B9%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2021-10-24javascript-react快速入门</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-24javascript-react01%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-24javascript-react01%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%B9%A0/</guid>
      <description>React 脚手架 $ npm i create-react-app -g $ create-react-app app 0、jsx初识 what &amp;mdash; jsx是js的语法扩展，可以很好的描述UI应该呈现出它应有的交互本质形式(有些像模版语言)，jsx可以生成React元素.
Why &amp;mdash; React认为渲染逻辑本质上与其他UI逻辑内在耦合，比如：UI中需要帮定处理事件、在某些时刻状态发生改变时候需要通知到UI，以及需要在UI中展示准备好的数据。
React并没有采用将标记与逻辑分离到不同文件的这种人为的分离方式，而是通过将二者共同放在称之为&amp;quot;组件&amp;quot;的松散耦合单元之中，来实现关注点分离。
how &amp;ndash; jsx是一个表达式，表达式中可以嵌入表达式、也可以指定属性、指定多个子元素
function getGreeting(user) { if (user) { return &amp;lt;h1&amp;gt;Hello, {formatName(user)}!&amp;lt;/h1&amp;gt;; } return &amp;lt;h1&amp;gt;Hello, Stranger.&amp;lt;/h1&amp;gt;; } const element = ( &amp;lt;div&amp;gt; &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;Good to see you here.&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; ); jsx表示一个对象，如下：
const element = ( &amp;lt;h1 className=&amp;#34;greeting&amp;#34;&amp;gt; Hello, world! &amp;lt;/h1&amp;gt; ); 等价于：
const element = React.createElement( &amp;#39;h1&amp;#39;, {className: &amp;#39;greeting&amp;#39;}, &amp;#39;Hello, world!&amp;#39; ); 的原始代码为：</description>
    </item>
    
    <item>
      <title>2021-10-24python编译器Jupyter</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-29python%E7%BC%96%E8%BE%91%E5%99%A8jupyter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-29python%E7%BC%96%E8%BE%91%E5%99%A8jupyter/</guid>
      <description>在anaconda打开终端 在终端输入 jupyter notebook &amp;ndash;generate-config 会弹出配置文件的存放位置
打开finder，./jupyter是隐藏文件，所以需要在终端输入 defaults write com.apple.finder AppleShowAllFiles -bool true; KillAll Finder 第一句是显示隐藏文件，第二句是关闭已打开的finder窗口；
找到jupyter_notebook_config,py，就是配置文件，打开后，找到
把 dir 前的 # 去掉，在 ‘ ’ 中添加希望保存的路径，修改后保存文件即可。 ————————————————
原文链接：https://blog.csdn.net/weixin_43951831/article/details/105127406</description>
    </item>
    
    <item>
      <title>2021-10-24thinkphp插件开发</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-27thinkphp%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-27thinkphp%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <description>简要说明插件开发流程 发布于 2020-02-06 12:45:31
一、开发流程 1.生成插件 A、命令行方式：（php think addon -a myaddon -c create） B、使用“插件开发”插件来生成，经过实践发现这种方式比命令行方式生成的更全面。 C、手动写代码：如果不嫌麻烦就采用这个，但虽然麻烦你会知道涉及到了哪些代码与文件夹，最好是采用前两种方式生成之后看一下有哪些代码变动了。
2.配置插件： A、手动配置 插件启动配置：application/extra/addons.php 插件基础配置：插件文件info.ini 插件扩展配置：插件文件夹中的config.php B、通过“插件开发”插件来配置
3.创建数据库
4.可手动创建，也可在后台一键CURL （在创建CRUL之前创建数据表。插件后端在application编辑、调试，之后移到插件对应文件夹。插件前端在插件的controller、model、view编辑、调试）。
php think crud -t test 这里“-t”参数指定你要生成的数据表（可以不用写前缀名）
常用参数 -c, &amp;ndash;controller[=CONTROLLER] 生成的控制器名,可选,默认根据表名进行自动解析 -m, &amp;ndash;model[=MODEL] 生成的模型名,可选,默认根据表名进行自动解析 -i, &amp;ndash;fields[=FIELDS] 生成的数据列表中可见的字段，默认是全部 -d, &amp;ndash;delete[=DELETE] 删除模式,将删除之前使用CRUD命令生成的相关文件
演示 A,自定义控制器名:webqi/classify表示curd生成的文件到webqi的目录下，但是测试只有控制器、视图文件到了对应的文件夹，其它的都没有成功。 B,自定义模型名:classify 表示设置模型的名称为classify C,生成之后在这些文件夹下有文件： application/admin/controller/webqi/ （测试成功） application/admin/model/webqi/ （没到二级文件夹） application/admin/view/webqi/ （测试成功） application/admin/validate/webqi/（没到二级文件夹） public/assets/js/backend/webqi/ （测试成功） 都只是生成后台管理的文件，其它地方没有生成文件。 需要手动修改命名空间的设置及文件位置，就算修改“自定义控制器名”为&amp;quot;/webqi/classify&amp;quot;等方式也没有成功，不知道是不是因为php版本的原因。手动修改命名空间之后就成功了。命令行删除模式也没有成功，需要手动删除。 D,如果数据库带下划线，如user_exams，则可以如下方式生成curd 5.创建菜单 A、命令行创建
php think menu -c test 这里“-c”参数指定控制器 B、通过“插件开发”插件来配置：通过该插件添加的数据保存在fa_auth_rule表中 C、手写创建，可以了解到原理。</description>
    </item>
    
    <item>
      <title>2021-11-07javascript-react快速入门</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-11-04javascript-react02%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-11-04javascript-react02%E7%BC%96%E7%A8%8B/</guid>
      <description>函数组件 1、两个组件数据传递，通过props来传递修改（props可以包含从父组件的属性和方法）
(1)第一步在父组件中定义相应的属性**(定义在this.state = {}中)**、方法
属性通过this.state或方法通过this.fun传给引入子组件的属性标签，如下：
//子组件 import React,{Component} from &amp;#34;react&amp;#34;; class Dialog extends Component{ constructor() { super(); } render() { return( &amp;lt;div className=&amp;#34;mask&amp;#34; style={{display:this.props.display}}&amp;gt; &amp;lt;div className=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;button onClick={this.props.hide}&amp;gt;关闭&amp;lt;/button&amp;gt; {this.props.title} &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; ) } } export default Dialog; //父组件 class Statisc extends Component { constructor() { super(); this.state = { display:&amp;#34;none&amp;#34; } } render() { let props = this.props return ( &amp;lt;div&amp;gt; &amp;lt;Navbar/&amp;gt; &amp;lt;Layout className=&amp;#34;layout&amp;#34;&amp;gt; &amp;lt;div className=&amp;#34;site-layout-content&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;统计&amp;lt;/h3&amp;gt; &amp;lt;h5&amp;gt;{props.name}&amp;lt;/h5&amp;gt; &amp;lt;di&amp;gt; &amp;lt;button onClick={this.</description>
    </item>
    
    <item>
      <title>hugo文档管理工具</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-11%E5%8D%9A%E5%AE%A2%E5%8F%8A%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-hugo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-11%E5%8D%9A%E5%AE%A2%E5%8F%8A%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-hugo/</guid>
      <description>date: 2021-10-13T10:06:52+08:00
draft: true
新建了heheiscool.github.io的git网页地址
只需要将rep文件拉到hugo中public去做管理即可
hugo可以将md文件生成漂亮的文档模版
1、brew安装
2、hugo version
3、创建一个新的网址
hugo new site quickstart
4、添加一个主题
cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 配置config
echo theme = \&amp;#34;ananke\&amp;#34; &amp;gt;&amp;gt; config.toml 5、添加内容
Content/posts目录中添加
hugo new posts/my-first-post.md 6、Start the Hugo server
hugo server -D 7、Customize the Theme 定制主题
对目前选的主题不太满意，应该有其他方法使用配置更好的主题
主题中有对md的格式，平时书写的时候可以模仿
8、Build static pages 生成静态网页
Output will be in ./public/ directory by default
hugo -D 到public目录中上传所有文件：
git add .
git commit -m &amp;ldquo;++&amp;rdquo;</description>
    </item>
    
    <item>
      <title>hugo文档管理工具</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-11%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-11%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>date: 2021-10-13T10:06:52+08:00
draft: true
新建了heheiscool.github.io的git网页地址
只需要将rep文件拉到hugo中public去做管理即可
hugo可以将md文件生成漂亮的文档模版
1、brew安装
2、hugo version
3、创建一个新的网址
hugo new site quickstart
4、添加一个主题
cd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 配置config
echo theme = \&amp;#34;ananke\&amp;#34; &amp;gt;&amp;gt; config.toml 5、添加内容
Content/posts目录中添加
hugo new posts/my-first-post.md 6、Start the Hugo server
hugo server -D 7、Customize the Theme 定制主题
对目前选的主题不太满意，应该有其他方法使用配置更好的主题
主题中有对md的格式，平时书写的时候可以模仿
8、Build static pages 生成静态网页
Output will be in ./public/ directory by default
hugo -D 到public目录中上传所有文件：
git add .
git commit -m &amp;ldquo;++&amp;rdquo;</description>
    </item>
    
    <item>
      <title>区块链-solidity学习01</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-09-21%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A001/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-09-21%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A001/</guid>
      <description>数组 动态数组、静态数组
uint[2] fixedArray; //固定长度，静态数组 uint[] dynamicArray; //动态数组，可以动态添加元素  结构体数组
struct Person{ string name; uint age; } Person[] people; //动态数组 公共数组
Person[] public people; //定义公共数组变量，其他外部合约可以从这个数组访问数组。自动创建getter。普通变量是否符合？ 地址Address 地址是所有合约的基础，20字节长度
属性：Balance
方式：send, call,callcode,delegatecall
Keccak256 和 类型转换 Ethereum 内部有一个散列函数keccak256，它用了SHA3版本。一个散列函数基本上就是把一个字符串转换为一个256位的16进制数字。字符串的一个微小变化会引起散列数据极大变化。
其中256位指的是计算机二进制256位，对应256/4 = 64 位16进制的字符串。
4位2进制对应1位16进制。
8位2进制为1个字节。
2位16进制为1个字节。
函数 (1)函数中的变量可以习惯使用_前缀的变量名
function eatHamburgers(string _name,uint _amount){ } (2)私有函数：只能在自己的合约类中调用，私有函数名前缀用_
function _addToArray(uint _number) private{ numbers.push(_number); } (3)返回值
function sayHello() public returns (string){ return &amp;#34;hello world&amp;#34;; } (4) pure修饰符，函数返回值只取决于输入参数，这个函数不访问应用里的数据
在之前的版本中我们经常使用constant来限制一个方法的制度性，当用constant修饰之后，此方法在被调用时不会进行存储的变更，同样不会产生交易和gas花费。而pure正是constant的替代品，逐渐的在替代constant的功能。
View修饰符，只能读取数据不能改变数据</description>
    </item>
    
    <item>
      <title>区块链-solidity学习02</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-09%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A002/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-09%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A002/</guid>
      <description>映射和地址 这是solidity很重要的两个数据类型：mapping、address
Address地址类型 代表以太坊链上的每一个账户，每个账户都有唯一的标识符，如下：
0x0cE446255506E92DF41614C46F1d6df9Cc969183 我们指定地址作为僵尸主人的ID，当用户通过与我们的应用程序交互来创建新的僵尸时候，新的僵尸所有权被设置到调用者的以太坊地址下。
Mapping 映射类型 本质就是存储和查找用户的键值对，定义如下：
	//将用户余额保存在一个 uint类型变量中 mapping(address=&amp;gt;uint) public accountBalance; //或者通过用户userId 来保存用户的名字 mapping(uint=&amp;gt;string) userIdToName; Msg.sender 全局变量msg.sender，代表当前调用者的address。一个合约存在于链上什么也不做，只有在用户调用这个合约中函数时候才会执行对应的合约函数，所以一定存在msg.sender
Require 使得函数在执行过程中，作为前置条件，当不满足某些条件时候直接抛出错误，并停止执行
function sayHiToVitalik(string _name) public returns (string) { // 比较 _name 是否等于 &amp;#34;Vitalik&amp;#34;. 如果不成立，抛出异常并终止程序  // (敲黑板: Solidity 并不支持原生的字符串比较, 我们只能通过比较  // 两字符串的 keccak256 哈希值来进行判断)  require(keccak256(_name) == keccak256(&amp;#34;Vitalik&amp;#34;)); // 如果返回 true, 运行如下语句  return &amp;#34;Hi!&amp;#34;; } 合约类的继承 contract Doge { function catchphrase() public returns (string) { return &amp;#34;So Wow CryptoDoge&amp;#34;; } } contract BabyDoge is Doge { function anotherCatchphrase() public returns (string) { return &amp;#34;Such Moon BabyDoge&amp;#34;; } } private （私有）函数。这意味着任何继承 的子合约都不能访问它。</description>
    </item>
    
    <item>
      <title>区块链-solidity学习03</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-10%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A003/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-10%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A003/</guid>
      <description>智能协议的永固性 到现在为止，我们讲的 Solidity 和其他语言没有质的区别，它长得也很像 JavaScript。
但是，在有几点以太坊上的 DApp 跟普通的应用程序有着天壤之别。
第一个例子，在你把智能协议传上以太坊之后，它就变得*不可更改*, 这种永固性意味着你的代码永远不能被调整或更新。
你编译的程序会一直，永久的，不可更改的，存在以太坊上。这就是 Solidity 代码的安全性如此重要的一个原因。如果你的智能协议有任何漏洞，即使你发现了也无法补救。你只能让你的用户们放弃这个智能协议，然后转移到一个新的修复后的合约上。
但这恰好也是智能合约的一大优势。代码说明一切。如果你去读智能合约的代码，并验证它，你会发现，一旦函数被定义下来，每一次的运行，程序都会严格遵照函数中原有的代码逻辑一丝不苟地执行，完全不用担心函数被人篡改而得到意外的结果。
外部依赖关系 在第2课中，我们将加密小猫（CryptoKitties）合约的地址硬编码到 DApp 中去了。有没有想过，如果加密小猫出了点问题，比方说，集体消失了会怎么样？ 虽然这种事情几乎不可能发生，但是，如果小猫没了，我们的 DApp 也会随之失效 &amp;ndash; 因为我们在 DApp 的代码中用“硬编码”的方式指定了加密小猫的地址，如果这个根据地址找不到小猫，我们的僵尸也就吃不到小猫了，而按照前面的描述，我们却没法修改合约去应付这个变化！
因此，我们不能硬编码，而要采用“函数”，以便于 DApp 的关键部分可以以参数形式修改。
比方说，我们不再一开始就把猎物地址给写入代码，而是写个函数 setKittyContractAddress, 运行时再设定猎物的地址，这样我们就可以随时去锁定新的猎物，也不用担心加密小猫集体消失了。
//子类 pragma solidity ^0.4.19; // put import statement here import &amp;#34;./zombiefactory.sol&amp;#34;; //调用加密猫中的一个函数，需要定义一个接口 contract KittyInterface { function getKitty(uint256 _id) external view returns ( bool isGestating, bool isReady, uint256 cooldownIndex, uint256 nextActionAt, uint256 siringWithId, uint256 birthTime, uint256 matronId, uint256 sireId, uint256 generation, uint256 genes ); } contract ZombieFeeding is ZombieFactory { //声明加密猫合约地址 	address ckAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d; //创建一个名为 kittyContract 的 KittyInterface，并用 ckAddress 为它初始化  KittyInterface kittyContract = KittyInterface(ckAddress); //当一个僵尸猎食其他生物体时，它自身的DNA将与猎物生物的DNA结合在一起，形成一个新的僵尸DNA  function feedAndMultiply(uint _zombieId, uint _targetDna, string _species) public { //我们确保对自己僵尸的所有权。 通过添加一个require 语句来确保 msg.</description>
    </item>
    
    <item>
      <title>区块链-solidity学习04-加密猫</title>
      <link>https://heheiscool.github.io/posters/mystudy/2021-10-10%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A004-%E5%8A%A0%E5%AF%86%E7%8C%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://heheiscool.github.io/posters/mystudy/2021-10-10%E5%8C%BA%E5%9D%97%E9%93%BE-solidity%E5%AD%A6%E4%B9%A004-%E5%8A%A0%E5%AF%86%E7%8C%AB/</guid>
      <description>date: 2021-10-10T10:06:52+08:00
draft: true
加密猫需求  低价买猫，高价卖猫。 让你的猫提供繁衍的服务，你收取对方的服务费，对方获得繁衍的猫。越珍贵的猫，服务价格越高。 你付出服务费，获得繁衍出的猫，然后卖出去。  额外的费用 - 因为迷恋猫运行在以太坊，因此你的操作需要支付Gas费用，例如拍卖猫、购买猫、提供繁衍服务、选择繁衍服务、取消拍卖、取消繁衍等。
2.拍卖逻辑
在游戏中，你可以设置拍卖的起始价格、终止价格、拍卖时长；然后拍卖的当前价格是在拍卖时长的范围内从起始价格线性变化到终止价格。如果有人在一个时刻使用当前价格进行了购买，他就能获得这只猫。
3. 价格因素
什么决定了一只猫的价格呢？物以稀为贵。每只猫都会有自己的“代”、繁衍速度、基因特征、稀有度等等。猜一猜，下面哪只猫的价格更高呢？
4. 繁衍体系
第几代
每只猫都有自己的代，由创始团队发布的猫是0代猫。一个x代猫和y代猫繁衍的下一代是max(x,y)+1。比较特殊的是，一只猫是不分性别的。
修养时间
每当猫繁衍之后，她需要修养一段时间，这是由Cooldown的特征所决定，不同的特征，需要的修养时间不同，具体如下表：
![image-20211011170101152](/Users/chenyang/Library/Application Support/typora-user-images/image-20211011170101152.png)
一只猫的修养特征由她的代所决定。一只3代的猫的修养特征是Swift。当这只猫繁衍后，它的特征会变化。每次繁衍等同于增加了一个代。如果这只3代猫繁衍了3次，她的修养特征会变成第6代的Snappy。这样就限制了一只猫的繁衍速度，增加了低代的稀有价值，也限制了稀有基因的遗传效率。
5. 基因特征
基因性状
![image-20211011173508475](/Users/chenyang/Library/Application Support/typora-user-images/image-20211011173508475.png)
一只猫的基因示例如上图中的最下面一行。基因一共被分为了12块，除了前三块的效果不详，后面几块基因分别对应了不同的性状:
![image-20211011173546694](/Users/chenyang/Library/Application Support/typora-user-images/image-20211011173546694.png)
基因编码
针对一个256位的基因编码，去掉前16位的0，剩余240位。将每五位通过kai编码，形成48的kai编码。每四个一组，形成12块。对应了上节所说的基因块。在每一个基因块中，第四位表示了当前猫的显性性状，其它倒数第二位、第三位、第四位分别表示了第一、第二、第三隐性性状。
在这里特别的Kai编码使用了数字和小写字母，为了肉眼识别时可能引入的误看，因此Kai编码没有使用0和L。于是基于5个二进制，一共有32种字符表示，具体如下：
![image-20211011174634656](/Users/chenyang/Library/Application Support/typora-user-images/image-20211011174634656.png)
在这个基础上，我们可以通过一只猫的基因编码确定她的性状。让我们通过眼睛的颜色来举例子：
![image-20211011174846535](/Users/chenyang/Library/Application Support/typora-user-images/image-20211011174846535.png)
6. 基因遗传
基因混合算法：
![image-20211011182943992](/Users/chenyang/Library/Application Support/typora-user-images/image-20211011182943992.png)
基因遗传的具体算法并没有被公开，但是很多牛人基于推断得到了伪码。简单来说，分为三步：
 双亲的基因基于75%的概率进行轮转，从而有可能让隐性性状便成了显性性状 当双亲的基因相差1的时候，有一定概率会进行变异，产生新的性状 如果没有发生变异，各有50%的概率从双亲继承一段基因  区块链开发部分 基本规则
 非兄妹父母关系的两只猫可以生育 两只猫可以来自同一个主人，或者一只猫被她的拥有者提供服务 任何一只都可以做父亲（sire）或者母亲（matron） 猫没有性别 交配后，母亲会怀孕，并且进入修养期；父亲也同样会进入修养期 修养期内不能再次剩余，修养期会随着生育次数而增长 母亲的修养期结束后，会生出小猫，并且可以再次生育 主人可以选择拍卖猫或者赠送猫  核心流程
 COO每隔15分钟产生一个0代的猫，并进行拍卖(Main createGen0Auction()) 用户可以购买0代猫(Sale Auction bid()) 用户可以查询猫的数据(Main getKitty()) 用户可以自己繁衍猫(Main breedWith() or breedWithAuto()) 修养期后，用户可以得到新的猫(Main giveBirth()) 用户可以把一只猫作为父亲，拍卖他的生育服务(Main createSiringAuction()) 用户把一只猫作为父亲，为某个以太坊地址提供生育服务(Main approveSiring()) 用户可以购买一只猫的生育服务(Main createSiringAuction()) 用户可以拍卖他的猫(Main createSaleAuction()) 用户可以购买被拍卖的猫(Sale Auction bid()) 用户可以查看被拍卖猫的信息(Sale/Siring Auction getAuction()) 用户能够取消拍卖(Sale/Siring Auction cancelAuction()) 用户能够赠送猫(Main transfer()) 用户能够指定另一个用户能够获得他的猫的权限(Main approve()) 用户可以认领自己被指定获得权限的猫(Main transferFrom()) 只有CEO能够替换COO或者CTO(Main setCEO() setCFO() setCOO()) COO能够创建和操作特殊的猫(Main createPromoKitty()) COO能够转移拍卖的收入(Main withdrawAuctionBalances()) CFO能够转移主协议的收益(Main withdrawBalance())  核心协议</description>
    </item>
    
  </channel>
</rss>
